---
# RISC OS CI build through build.riscos.online
#
#
# The 'release' job is triggered when a tag starting with a 'v' is created,
# which will create a GitHub release for the repository with the name of the
# version tag. The release will be a draft, and should be updated with
# changes as you see fit.
#

name: RISC OS

# Controls when the action will run. Triggers the workflow on:
#   * push on any branch.
#   * tag creation for tags beginning with a 'v'
on:
  push:
    branches: ["*"]
    tags: ["v*"]
  # Pull request events happen on pull request state transitions, so we probably don't want this here.
  #pull_request:
  #  branches: ["*"]

jobs:
  build-riscos:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      leafname: ${{ steps.version.outputs.leafname }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Run a build with the shell script
        run: |
          ./test-build.sh

      - name: Work out the version number
        id: version
        run: |
          version=$(grep -Eo 'version\$=.*? ' ARM6Src,fd1 | cut -d'"' -f2)
          echo "This is version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "leafname=ARM6SUPP,ffa" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        with:
          name: RISCOS-build
          path: ${{ steps.version.outputs.leafname }}

  # The release only triggers when the thing that was pushed was a tag starting with 'v'
  release:
    needs: build-riscos
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Download built RISC OS binary
        uses: actions/download-artifact@v3
        with:
          name: RISCOS-build

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          draft: true
          artifacts: "${{ needs.build-riscos.outputs.leafname }}"
          artifactContentType: application/octet-stream
